pipeline {
    agent any

    parameters {
        string(name: 'DB_IP', defaultValue: '', description: 'IP do database para teste do pacote')
        password(name: 'DB_PASSWORD', defaultValue: '', description: 'Senha do database para teste do pacote')  
    }

    stages {
        
        stage('Clone Infra') {
            steps {
                git url: 'https://github.com/ericohortolan/projetofinalGamaThree', branch: 'main'
            }
        }

        stage('Clone App') {
            steps {
                // Get some code from a GitHub repository
                //sh 'rm -rf spring-web-youtube && git clone https://github.com/torneseumprogramador/spring-web-youtube.git'
                sh 'rm -rf app-code'
                sh 'mkdir app-code && cd app-code'
                dir ('app-code'){
                    git url: 'https://github.com/torneseumprogramador/spring-web-youtube.git', branch: 'deploy-docker'
                }
            }
        }

        stage('Build App') {
            steps {
                sh 'cd app-code && ./mvnw package -Dmaven.test.skip -DskipTests -Dmaven.javadoc.skip=true'
                echo 'Building..'
            }
        }

        stage('Test App') {
            steps {
                sh "export USER=root && export PASSWORD=\"$DB_PASSWORD\" && export DATABASE_URL='mysql://$DB_IP:3306/SpringWebYoutubeTest?useTimezone=true&serverTimezone=UTC' && cd app-code && ./mvnw test"
                echo 'Testing....'
                //sh 'nohup ./start.sh &'
                //echo ' Starting....'
            }
        }

        stage('Create and Push Docker image') {
            steps {
                sh "cd app-code && docker build -t ericovh/projetofinal-spr-web -f Dockerfile . && docker push ericovh/projetofinal-spr-web"
                echo 'pushing docker image..'
            }
        }

  //      stage('BDD') {
    //        steps {
      //          git url: 'https://github.com/alexandreponte2/testeBDDjavamac.git', branch: 'main'
        //        sh './mvnw test'
          //  }
       // }
        //stage('K8s-DEV') {
        //    steps {
        //        git url: 'https://github.com/alexandreponte2/javapods.git', branch: 'main'
        //        sh '/Users/alexandre.s.ponte/kubectl get nodes -o wide'
        //        sh '/Users/alexandre.s.ponte/kubectl apply -f deployment-java-dev.yml'
        //        sh '/Users/alexandre.s.ponte/kubectl apply -f nodeport-svc-java-dev.yml'
        //    }
        //}
        //stage('K8s-QA') {
        //    steps {
        //        git url: 'https://github.com/alexandreponte2/javapods.git', branch: 'main'
        //        sh '/Users/alexandre.s.ponte/kubectl get nodes -o wide'
        //        sh '/Users/alexandre.s.ponte/kubectl apply -f deployment-java-qa.yml'
        //        sh '/Users/alexandre.s.ponte/kubectl apply -f nodeport-svc-java-qa.yml'
        //    }
        //}
        //stage('K8s-PROD') {
        //    steps {
        //        git url: 'https://github.com/alexandreponte2/javapods.git', branch: 'main'
        //        sh '/Users/alexandre.s.ponte/kubectl get nodes -o wide'
        //        sh '/Users/alexandre.s.ponte/kubectl apply -f deployment-java-prod.yml'
        //        sh '/Users/alexandre.s.ponte/kubectl apply -f nodeport-svc-java-prod.yml'
        //    }
        //}
    }
}
